#!/bin/bash
#SBATCH --job-name=se-025ERSEM
#SBATCH --time=00:10:00
#SBATCH --account=n01-PML
#SBATCH --partition=standard
#SBATCH --qos=standard
#SBATCH --nodes=19
#SBATCH --ntasks=128
#SBATCH --ntasks-per-core=1

# ARCHER2 support suggestion to reduce UCX error messages:
export UCX_IB_REG_METHODS=direct
#################### nemo runscript options ############################
# At present se-nemo has been run on 19 and 11 nodes                   #
########################################################################
srun hostname -s > hostfile
if [ $SLURM_NNODES -eq 164 ]
then
   NXIOS=164
   NNEMO=9172
   ./build_rankfile  -S $NXIOS -s 16 -m 1 -C $NNEMO -c 22 -N 128 -n32 -H164 > rankfile
elif [ $SLURM_NNODES -eq 97 ]
then
   NXIOS=8
   NNEMO=8448
   ./build_rankfile -S $NXIOS -s 16 -m 2 -C $NNEMO -c 22 -N 128 -n 32 -H 97 > rankfile
elif [ $SLURM_NNODES -eq 75 ]
then
   NXIOS=8
   NNEMO=6429
   ./build_rankfile -S $NXIOS -s 16 -m 2 -C $NNEMO -c 22 -N 128 -n 32 -H 75 > rankfile
elif [ $SLURM_NNODES -eq 19 ]
then
   NXIOS=8
   NNEMO=1543
   ./build_rankfile -S $NXIOS -s 16 -m 2 -C $NNEMO -c 22 -N 128 -n 32 -H 19 > rankfile
else
   exit
fi
########################################################################
RUNDIR=$PWD

# SUBMIT WITH:
# "sbatch --export=y0=1970,m0=1 runscript.multimonth.slurm"


#################### nemo runscript options ############################
# For info on the parameters see namelist_ref                          #
########################################################################
rn_rdt=600          ; ln_zps='.false.'      ; ln_tmx_itf='.false.'
ln_bt_auto='.true.' ; rn_bt_cmax=0.8        ; nn_baro=30
nn_mxlice=3         ; nn_z0_ice=1           ; ln_rnf_new='.false.'
ln_rstdate='.true.' ; ln_shlat2d='.true.'   ; nn_diaharm=1981
rn_Cd0=2.5e-3       ; ln_loglayer='.false.' ; ln_tide='.true.'
ln_boost='.true.'   ; ln_gls='.true.'       ; ln_int_wave_drag='.true.'
ln_hpg_djc='.true.' ;
########################################################################


#################### runscript options #################################
# Controls for the simulation                                          #
########################################################################
ln_spin='.true.'   # Do we require a spin up phase for the ice
nn_spin=1          # How many years spin up
year_st=1976       # Start year of the simulation (ramains constant)
year_en=1977       # End year of this job submission
offset=0           # If rdt has changed, an offset to nn_it000 is needed
nn_spin_cycle=1    # Change to nn_spin+1 if year is .gt. year_st
year=$y0           # Change if starting job part way through simulation
nmmax=1            # number of months to go through before submitting a new job

########################################################################


########################################################################
#                No need to edit below this line                       #
########################################################################

if [ "$ln_zps" = ".true." ]
then
   ln_trabbl='.true.'
   ln_traldf_hor='.false.'
   ln_traldf_iso='.true.'
   ln_hpg_prj='.false.'
   ln_hpg_sco='.true.'
else
   ln_trabbl='.false.'
   ln_traldf_hor='.true.'
   ln_traldf_iso='.false.'
   if [ "$ln_hpg_djc" = ".true." ]
   then
      ln_hpg_prj='.false.'
   else
      ln_hpg_prj='.true.'
   fi
   ln_hpg_sco='.false.'
fi

if [ "$ln_loglayer" = ".true." ]
then
   ln_non_lin='.false.'
else
   ln_non_lin='.true.'
fi

if [ "$ln_gls" = ".true." ]
then
   ln_tke='.false.'
   ln_zdfevd='.false.'
else
   ln_tke='.true.'
   ln_zdfevd='.true.'
fi

if [ "$ln_rnf_new" = ".true." ]
then
	cn_dir=""
	sn_rnf="'JRA_BGC',24,'rorunoff',.true.,.false.,'yearly'"
	sn_cnf="'runoff_1m_nomask.nc',0,'socoefr',.false.,.true.,'yearly'"
else
	cn_dir="INPUTS"
	sn_rnf="'runoff_1m_nomask.nc',-1,'sornficb',.true.,.true.,'yearly'"
	sn_cnf="'runoff_1m_nomask.nc',0,'socoefr',.false.,.true.,'yearly'"
fi

echo $SLURM_NNODES

. XXX_ENV_XXX

export OMP_NUM_THREADS=1

jpni=-1
jpnj=-1

nsstart=$(date -d "$year_st-01-01 00:00:00 GMT" +%s) #seconds since EPOCH for total simulation start


#set annual links for ERSEM
./set_annual_links.sh $y0

stopflag=0

nm=1

while [ $y0 -le $year_en ] && [ $nm -le $nmmax ]
do
   #Compute previous and next month:
   mp=$(( $m0 + 1 ))
   if [ $mp -eq 13 ]
   then
      mp=1
      if [ $nn_spin_cycle -gt $nn_spin ]
      then
        yp=$(( y0 + 1 ))
      else
	nn_spin_cycle=$(($nn_spin_cycle+1))
	yp=$y0
      fi
   else
      yp=$y0
   fi
   mm=$(( $m0 - 1 ))
   if [ $mm -eq 0 ]
   then
      mm=12
      if [ $nn_spin_cycle -gt $nn_spin ]
      then
          ym=$(( y0 - 1 ))
      else
	  ym=$y0
      fi
   else
      ym=$y0
   fi
   echo "Preparing $y0 $m0 ..."
   #./monthlyclean.sh $RUNDIR   #TO DO!!!!!!!!!!!!!!

   m0str=$(printf %02d $m0)
   mpstr=$(printf %02d $mp)
   mmstr=$(printf %02d $mm)

   #clean leftover restarts
   rm -rf restart.nc restart_ice.nc restart_trc.nc restart_[0-9]???.nc restart_trc_[0-9]???.nc restart_ice_[0-9]???.nc
   # Array pretending to be a Pythonic dictionary {EXP_NAME:NZ}
   ARRAY=( "SENEMO:75"
         )

   for ens in "${ARRAY[@]}"
   do

      nam="${ens%%:*}"
      jpk="${ens##*:}"

      if [ $year -eq $nn_diaharm ]
      then
	 ln_diaharm='.true.'
      else
	 ln_diaharm='.false.'
      fi

      if [ $year -eq 1976 ]
      then
         nn_it000=1
	 if [ $nn_spin_cycle -eq 1 ]
         then
            ln_rstart='.false.'	  
            ln_rstart_top='.false.'	  
	    ln_tide_ramp='.true.'
	 else
            ln_rstart='.true.'	  
            ln_rstart_top='.true.'
	    ln_tide_ramp='.false.'
         fi
	 nn_rstctl=0
         ln_reset_ts='.true.'
      else
         nn_it000=`./end_time_step $(( $year - 1 )) $rn_rdt $year_st` ; rs0=`printf "%08d" $nn_it000`; nn_it000=$(( $nn_it000 + 1 + $offset ))
         ln_rstart=".true."
         ln_rstart_top=".true."
	 nn_rstctl=2
	 ln_tide_ramp='.false.'
         ln_reset_ts='.false.'
      fi

       # number of days in the current month
       case $m0 in
      	       4|6|9|11) nday=30 ;;
      	       2) if [ $(( y0 % 4 )) -ne 0 -o $(( y0 % 100)) -eq 0 -a $(( $y0 % 400 )) -ne 0 ]; then ndays=28; else ndays=29; fi ;;
      	       *) ndays=31 ;;
       esac
       # number of days in the previous month (needed for restart_date)
       case $mm in
      	       4|6|9|11) mday=30 ;;
      	       2) if [ $(( ym % 4 )) -ne 0 -o $(( ym % 100)) -eq 0 -a $(( $ym % 400 )) -ne 0 ]; then mdays=28; else mdays=29; fi ;;
      	       *) mdays=31 ;;
       esac

       echo 'CALCULATE NIT'

       nit=$(( 86400 * $ndays / $rn_rdt ))

       echo 'nit= '$nit

       ns0=$(date -d "$y0-${m0str}-01 00:00:00 GMT" +%s) #seconds since EPOCH for this chunk
       nn_it000=$(( $ns0 - $nsstart ))
       nn_it000=$(( $nn_it000 / $rn_rdt + 1 + $offset ))
       nn_itend=$(( $nn_it000 + $nit -1 ))
       nn_date0=$y0${m0str}01
       date_restart=$ym${mmstr}$mdays

      if [ "$ln_rstdate" = ".true." ]
      then
         if [ $year -eq $year_st ]
         then
            rs0=$date_restart    # TODO consider if we want to split cases for spinup 
         else
            rs0=$date_restart
         fi
      rs0=$date_restart
      fi

      #set physical namelist
      if [ $nn_spin_cycle -le $nn_spin ]
      then
         sed    "s/XXX_EXP_XXX/$nam\_S$nn_spin_cycle/g" namelist_cfg_template > namelist_cfg   
         sed -i "s/XXX_RS0_XXX/$nam\_S$(($nn_spin_cycle-1))_$rs0\_restart/g" namelist_cfg    # restart file NAME of the member_SX_YYYY_restart
         sed "s/XXX_RS0_XXX/$nam\_S$(($nn_spin_cycle-1))_$rs0\_restart_ice/g" namelist_ice_cfg_template > namelist_ice_cfg
         sed "s/XXX_RS0_XXX/$nam\_S$(($nn_spin_cycle-1))_$rs0\_restart_trc/g" namelist_top_template > namelist_top_cfg
      else
         sed    "s/XXX_EXP_XXX/$nam/g" namelist_cfg_template > namelist_cfg
         if [ $year -eq $year_st ]
         then
            sed -i "s/XXX_RS0_XXX/$nam\_S$(($nn_spin_cycle-1))_$rs0\_restart/g" namelist_cfg  
            sed "s/XXX_RS0_XXX/$nam\_S$(($nn_spin_cycle-1))_$rs0\_restart_ice/g" namelist_ice_cfg_template > namelist_ice_cfg
            sed "s/XXX_RS0_XXX/$nam\_S$(($nn_spin_cycle-1))_$rs0\_restart_trc/g" namelist_top_template > namelist_top_cfg
         else
            sed -i "s/XXX_RS0_XXX/$nam\_$rs0\_restart/g" namelist_cfg
            sed "s/XXX_RS0_XXX/$nam\_$rs0\_restart_ice/g" namelist_ice_cfg_template > namelist_ice_cfg
            sed "s/XXX_RS0_XXX/$nam\_$rs0\_restart_trc/g" namelist_top_template > namelist_top_cfg
         fi
      fi

      sed -i "s/XXX_TST_XXX/$nn_it000/g" namelist_cfg
      sed -i "s/XXX_YEAR_XXX/$year/g" namelist_cfg
      sed -i "s/XXX_TEN_XXX/$nn_itend/g" namelist_cfg
      sed -i "s/XXX_RDT_XXX/$rn_rdt/g" namelist_cfg
      sed -i "s/XXX_RST_XXX/$ln_rstart/g" namelist_cfg
      sed -i "s/XXX_RCT_XXX/$nn_rstctl/g" namelist_cfg
      sed -i "s/XXX_RSD_XXX/$ln_rstdate/g" namelist_cfg
      sed -i "s/XXX_RTS_XXX/$ln_reset_ts/g" namelist_cfg
      sed -i "s/XXX_DATE0_XXX/$nn_date0/g" namelist_cfg
      sed -i "s/XXX_RMP_XXX/$ln_tide_ramp/g" namelist_cfg
      sed -i "s/XXX_BTA_XXX/$ln_bt_auto/g" namelist_cfg
      sed -i "s/XXX_BTC_XXX/$rn_bt_cmax/g" namelist_cfg
      sed -i "s/XXX_CNDIR_XXX/$cn_dir/g" namelist_cfg
      sed -i "s/XXX_RNF_XXX/$sn_rnf/g" namelist_cfg
      sed -i "s/XXX_CNF_XXX/$sn_cnf/g" namelist_cfg
      sed -i "s/XXX_TID_XXX/$ln_tide/g" namelist_cfg
      sed -i "s/XXX_ITF_XXX/$ln_tmx_itf/g" namelist_cfg
      sed -i "s/XXX_DHM_XXX/$ln_diaharm/g" namelist_cfg
      sed -i "s/XXX_BOO_XXX/$ln_boost/g" namelist_cfg
      sed -i "s/XXX_DJC_XXX/$ln_hpg_djc/g" namelist_cfg
      sed -i "s/XXX_SHA_XXX/$ln_shlat2d/g" namelist_cfg
      sed -i "s/XXX_CD0_XXX/$rn_Cd0/g" namelist_cfg
      sed -i "s/XXX_GLS_XXX/$ln_gls/g" namelist_cfg
      sed -i "s/XXX_TKE_XXX/$ln_tke/g" namelist_cfg
      sed -i "s/XXX_EVD_XXX/$ln_zdfevd/g" namelist_cfg
      sed -i "s/XXX_BBL_XXX/$ln_trabbl/g" namelist_cfg
      sed -i "s/XXX_HOR_XXX/$ln_traldf_hor/g" namelist_cfg
      sed -i "s/XXX_ISO_XXX/$ln_traldf_iso/g" namelist_cfg
      sed -i "s/XXX_PRJ_XXX/$ln_hpg_prj/g" namelist_cfg
      sed -i "s/XXX_SCO_XXX/$ln_hpg_sco/g" namelist_cfg
      sed -i "s/XXX_LOG_XXX/$ln_loglayer/g" namelist_cfg
      sed -i "s/XXX_NLN_XXX/$ln_non_lin/g" namelist_cfg
      sed -i "s/XXX_Z0I_XXX/$nn_z0_ice/g" namelist_cfg
      sed -i "s/XXX_IMX_XXX/$nn_mxlice/g" namelist_cfg
      sed -i "s/XXX_PNI_XXX/$nn_jpni/g" namelist_cfg
      sed -i "s/XXX_PNJ_XXX/$nn_jpnj/g" namelist_cfg
      sed -i "s/XXX_TDG_XXX/$ln_int_wave_drag/g" namelist_cfg
      
      sed -i "s/XXX_RST_XXX/$ln_rstart_top/g" namelist_top_cfg
      sed -i "s/XXX_RCT_XXX/$nn_rstctl/g" namelist_top_cfg

   done

   # execution
   for ens in "${ARRAY[@]}"
   do
      mpirun --oversubscribe -rf rankfile --report-bindings -v -np $NXIOS --bind-to core ./xios_server.exe : -np $NNEMO --bind-to core ./nemo  &
      ./time_step_chk $SLURM_JOB_ID $nn_itend &
   done

   wait
   echo "Finished $y0 $m0 at $(date +%s) seconds since 1970-01-01 00:00:00"

   for ens in "${ARRAY[@]}"
   do
      if [ $year -eq $year_st ] && [ $nn_spin_cycle -le $nn_spin ]
      then
         suf=$year$m0\_S$nn_spin_cycle
	 res=$year$m0$ndays\_S$nn_spin_cycle
      else
         suf=$year$m0
	 res=$year$m0$ndays
      fi

      #prepare archive directory
      ARCHIVEDIR=$RUNDIR/$nam/$y0/$m0str/
      mkdir -p $ARCHIVEDIR
      for file in ${nam}_*${nend}_restart_????.nc
      do
	      fn=${file: -7:4} #file number
	      mv $file RESTARTS/${nam}_${res}_restart_$fn.nc&
      done
      wait
      for file in ${nam}_*${nend}_restart_ice_????.nc
      do
	      fn=${file: -7:4} #file number
	      mv $file RESTARTS/${nam}_${res}_restart_ice_$fn.nc&
      done
      wait
      for file in ${nam}_*${nend}_restart_trc_????.nc
      do
	      fn=${file: -7:4} #file number
	      mv $file RESTARTS/${nam}_${res}_restart_trc_$fn.nc&
      done
      wait
      mv ${nam}_*_${nn_date0}_${res}*.nc $ARCHIVEDIR   # this hasn't worked
      mkdir -p meta_out
      mv -f ocean.output meta_out/ocean.output.bz2.$suf
      cp namelist_cfg meta_out/namelist_cfg.$suf
      cp namelist_ice_cfg meta_out/namelist_ice_cfg.$suf
      cp namelist_top_cfg meta_out/namelist_top_cfg.$suf
      cp run.stat meta_out/run.stat.$suf
      cp time.step meta_out/time.step.$suf

      fname=$y0/$m0str
      #echo "Archiving in $fname ..."
      #ARCHIVEDIR=/work/n01/n01/gig/eORCA1_ARCHIVE/TEST
      #sbatch --export=RUNDIR=$PWD,ARCHIVEDIR=$ARCHIVEDIR,folder=$fname archiveFolder.slurm
      #sbatch --export=RUNDIR=$PWD,folder=$fname archiveFolder.slurm
   done
   wait

   current_stp=`sed -n 1,1p time.step`
   if [ ! $current_stp -eq $nn_itend ]
   then
      exit
   fi
   
   y0=$yp
   m0=$mp
   nm=$(( nm + 1 ))

done
#time_end=`date +%y%m%d%H%M%S`
duration=$SECONDS

#echo "Done $nmmax months in $(( (time_end-time_start) /60  )) minutes."
echo "Done $nmmax months in $(($SECONDS / 60)) minutes."


##resubmit:
if [ $y0 -le $year_en ]
then
   echo 'Submitting' $y0 $m0 '...'
   sbatch --export=y0=$y0,m0=$m0 runscript.multimonth.slurm
   echo "Done."
else
   echo "All done."
fi

exit
